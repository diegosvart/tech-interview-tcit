name: CI

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  actions: read
  checks: write

jobs:
  build-test:
    name: Build & Test (Node ${{ matrix.node }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node: [20.x]
    services:
      postgres:
        image: postgres:16
        ports:
          - 5544:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tech_test_tcit_test
        options: >-
          --health-cmd "pg_isready -U postgres -d tech_test_tcit_test" \
          --health-interval 5s \
          --health-timeout 5s \
          --health-retries 10

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5544/tech_test_tcit_test?schema=public
      NODE_ENV: test
      CI: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - name: Install root dependencies
        run: npm install

      - name: Install server dependencies
        working-directory: server
        run: npm install

      - name: Install client dependencies
        working-directory: client
        run: npm install

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            node -e "require('net').connect(5544,'127.0.0.1').on('connect',()=>{process.exit(0)}).on('error',()=>process.exit(1))" && \
            PGPASSWORD=postgres psql -h 127.0.0.1 -U postgres -d tech_test_tcit_test -c 'SELECT 1' && break || sleep 2;
            if [ $i -eq 30 ]; then echo 'Postgres no respondió a tiempo'; exit 1; fi;
          done
        shell: bash

      - name: Backend tests (coverage)
        run: npm run test:server:coverage

      - name: Frontend tests (placeholder)
        run: |
          echo "Ejecutando tests frontend si existen...";
          npm --prefix client run test || echo "(No hay tests frontend aún)"

      - name: Lint all
        run: npm run lint:all

      - name: Build all
        run: npm run build:all

      - name: Upload backend coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: server/coverage
          if-no-files-found: warn

      - name: Summary
        if: always()
        run: |
          echo '## CI Summary' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '* Node version: ${{ matrix.node }}' >> $GITHUB_STEP_SUMMARY
          echo '* Coverage backend artifact: backend-coverage' >> $GITHUB_STEP_SUMMARY
          echo '* Frontend tests: placeholder (añadir cuando existan)' >> $GITHUB_STEP_SUMMARY
